extends ./template/layout.jade


block custom_header
	style.
		#mainWrap{
			margin: 0 auto;
		}
		#innerWrap{
			text-align:left;
			position:relative;
		}
		#leftWrap{
			width:39%;
			margin:0;
			padding: 0;
			position: relative;
			left:0;
			min-height:450px;
			overflow-y:auto;
			max-height:700px;
		}
		#rightWrap{
			width:59%;
			position:absolute;
			right:0;
			top:0;
		}
		
		
		.transEntry{
			width:100%;
		}
		.transDate, .transBlock{
			padding:4px;
			display:inline-block;
		}
		.transDate{
			border:1px #fff solid;
		}
		.transBlock{
			width:325px;
			background:#5B9BD5;
			color:#fff;
			border:1px #41719C solid;
			border-top:1px #5B9BD5 solid;
			text-align:center;
			cursor: pointer;
		}
		.transBlock:hover{
			border-color:#fff;
		}
		
		
		#stateWrap{
			margin:15px;
			min-height: 400px;
			padding:10px;
		}
		.borderMe{
			border: 1px #41719C solid;
		}
		.selected{
			font-weight:900;
			background: #555;
			border-top:1px #555 solid;
		}
		#funWrap{
			padding:10px;
		}
		.remove, .refresh{
			margin:0px 5px;
			cursor:pointer;
		}
		.fa{
			color: #2e6da4;
		}
		
	script(type='text/javascript').
		$(document).ready(function(){
			var loading = '<div class="loadingdiv"><span></span> <span></span> <span></span> <span></span> <span></span><div></div></div>';
			/////////////////////
			//// on start up ////
			/////////////////////
			buildGoFunc(bag.cc);
			$("input[name='host']").val(bag.cc.details.host);
			$("input[name='port']").val(bag.cc.details.port);
			setTime();
			var nIntervId = setInterval(setTime, 1000);
			function setTime(){
				$("#currentDate").html(formatDate(new Date(), '%I:%m:%s %p'));
			}
			
			rest_queryLedger(cb_got_ledger);
			function cb_got_ledger(e, resp){
				if(e != null){
					
				}
				else{
					buildLedger(resp);
				}
			}
			
			
			///////////////////////
			//// jQuery Events ////
			///////////////////////
			$(document).on("click", ".go", function(){
				var host = $("input[name='host']").val();
				var port = $("input[name='port']").val();
				var func = $(this).attr('func');
				var args = $(this).prev().val();
				console.log(host, args);
				
				var data = {
								"chaincodeSpec": {
									"type": "GOLANG",
									"chaincodeID": bag.cc.details.name,
									"ctorMsg": {
										"function": func,
										"args": [args]
									}
								}
							};
				console.log(data);
				$.ajax({
					method: 'GET',
					url: 'http://' + host + ':' + port + '/devops/invoke',
					data: JSON.stringify(data),
					contentType: 'application/json',
					success: function(json){
						console.log('Success', json);
					},
					error: function(e){
						console.log('Error', e);
					}
				});
				
			});
			
			$(document).on("click", ".transBlock", function(){
				var html = "";
				html += $(this).prev().html();
				html += " " + $(this).html();
				$("#selectedLegend").html(html);
				
				$("#stateInnerWrap").html(loading);
				
				rest_readNames(cb_got_names);
				
				function cb_got_names(e, names){
					buildVarObjcts(names);
				}
			});
			
			$(document).on("click", ".refresh", function(){
				var name = $(this).parent().attr("varName");
				var me = this;
				rest_read(name, null, cb_got_value);
				$(this).parent().append(loading);
				
				function cb_got_value(e, value){
					console.log('got', e, value);
					$(me).parent().find(".loadingdiv").fadeOut();
					if(e != null){
						$(me).prev("input").val('Error :(' );
					}
					else{
						$(me).prev("input").val(value);
					}
				}
			});
			
			
			////////////////////////
			//// HTTP Functions ////
			////////////////////////
			function rest_read(name, lvl, cb){
				console.log("reading var", name);
				var host = $("input[name='host']").val();
				var port = $("input[name='port']").val();
				var data = {
								"chaincodeSpec": {
									"type": "GOLANG",
									"chaincodeID": bag.cc.details.name,
									"ctorMsg": {
										"function": "query",
										"args": [name]
									}
								}
							};
				setTimeout(function(){ cb(null, "one"); }, 1000);
				/*$.ajax({
					method: 'GET',
					url: 'http://' + host + ':' + port + '/devops/query',
					data: JSON.stringify(data),
					contentType: 'application/json',
					success: function(json){
						console.log('Success', json);
						if(cb) cb(null, json);
					},
					error: function(e){
						console.log('Error', e);
						if(cb) cb(e, null);
					}
				});*/
			}
			
			function rest_readNames(cb){
				console.log("reading all var names");
				var host = $("input[name='host']").val();
				var port = $("input[name='port']").val();
				var data = {
								"chaincodeSpec": {
									"type": "GOLANG",
									"chaincodeID": bag.cc.details.name,
									"ctorMsg": {
										"function": "query",
										"args": [name]
									}
								}
							};
				setTimeout(function(){ cb(null, ["first", "second", "A", "B"]); }, 1000);
				/*$.ajax({
					method: 'GET',
					url: 'http://' + host + ':' + port + '/devops/query',
					data: JSON.stringify(data),
					contentType: 'application/json',
					success: function(json){
						console.log('Success', json);
						if(cb) cb(null, json);
					},
					error: function(e){
						console.log('Error', e);
						if(cb) cb(e, null);
					}
				});*/
			}
		
			function rest_queryLedger(cb){
				console.log("reading ledger");
				var host = $("input[name='host']").val();
				var port = $("input[name='port']").val();
				var data = {
								"chaincodeSpec": {
									"type": "GOLANG",
									"chaincodeID": bag.cc.details.name,
									"ctorMsg": {
										"function": "query",
										"args": [name]
									}
								}
							};
				var resp = [];
				for(var i=0; i < 10; i++){
					var temp = 	{
									timestamp: Date.now() - 1000*(10-i)*60,
									name: "foo()"
								};
					resp.push(temp);
				}
				
				setTimeout(function(){ cb(null, resp); }, 1000);
				/*$.ajax({
					method: 'GET',
					url: 'http://' + host + ':' + port + '/devops/query',
					data: JSON.stringify(data),
					contentType: 'application/json',
					success: function(json){
						console.log('Success', json);
						if(cb) cb(null, json);
					},
					error: function(e){
						console.log('Error', e);
						if(cb) cb(e, null);
					}
				});*/
			}
			
			
			////////////////////////////
			///// Build UI Elements ////
			////////////////////////////
			function buildGoFunc(cc){
				var skip = ['write', 'read', 'delete', 'init'];
				var html = '';
				var field = '<input class="arginput" type="text" placeholder="array of strings"/>';
				for(var i in cc.details.func){
					if(!in_array(cc.details.func[i].toLowerCase(), skip)){
						html += '<div class="func">' + cc.details.func[i] + '([ ' + field + ']); </dic>'
						html += '<button type="button" class="go" func="' + cc.details.func[i] + '"> Run </button>';
					}
				}
				$("#ccWrap").append(html);
			}
			
			function buildVarObjcts(names){
				var html = "";
				for(var i in names){
					html += '<div varname="' + names[i] + '">' +
								'<span> ' + names[i] + ' = </span>' +
								'<input type="text" placeholder="???" name="var_' + names[i] + '"/>' +
								'<span class="fa fa-refresh refresh"></span>' +
								//'<span class="fa fa-remove remove"></span>' +
							'</div>';
				}
				$("#stateInnerWrap").html("").append(html);
			}
			
			function buildLedger(data){
				console.log('?', data);
				var html = "";
				var current = 	'<div class="transEntry">';
				current += 			'<div class="transDate" id="currentDate">' + formatDate(Date.now(), '%I:%m:%s %p') + '</div>';
				current += 			'<div class="transBlock selected">Current</div>';
				current += 		'</div>';
				for(var i in data){
					html += '<div class="transEntry">';
					html += 	'<div class="transDate">' + formatDate(data[i].timestamp, '%I:%m:%s %p') + '</div>';
					html += 	'<div class="transBlock">' + data[i].name + '</div>';
					html += '</div>';
				}
				html += current;
				$("#leftWrap").html("").append(html);
			}
		});

block content
	h1 ChainCode Investigator
	p Examine/test your chaincode
	
	hr
	
	
	#mainWrap
		input(type="text" name="host" placeholder="Peer IP" style="margin-left:0;")
		input(type="text" name="port" placeholder= "Peer Port")
		
		#innerWrap.borderMe
			#leftWrap.
				<div class="loadingdiv">
					<span></span>
					<span></span>
					<span></span>
					<span></span>
					<span></span>
					<div></div>
				</div>
					
			#rightWrap
				#stateWrap.borderMe
					center
						h2#selectedLegend Select a Time
					#stateInnerWrap
	
	br
	
	#funWrap.borderMe
		
		form#ccWrap
			h2 CRUD:
			hr
			.func 
				span Read (
				input(type="text" name="read_name" placeholder="var name")
				span ); 
				button(type="button")#query Run
			
			.func 
				span Write (
				input(type="text" name="write_name" placeholder="var name")
				input(type="text" name="write_val" placeholder="value")
				span ); 
				button(type="button")#query Run
				
			.func 
				span Remove (
				input(type="text" name="remove_name" placeholder="var name")
				span ); 
				button(type="button")#query Run
			
			.func 
				span Init (
				input(type="text" name="init_names" placeholder="array of strings")
				span ); 
				button(type="button")#query Run
			br
			h2 Custom:
			hr
		

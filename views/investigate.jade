extends ./template/layout.jade


block custom_header
	style.
		button{
			padding: 5px 15px;
			font-size: 13px;
			background: #41719C;
			border: 1px #41719c solid;
		}
		button:hover{
			background:#fff;
			color:#41719C;
		}
		hr{
			background:#41719c;
		}
		body{
			margin: auto;
			width:800px;
		}
		#mainWrap{
			margin: 0 auto;
		}
		#innerWrap{
			text-align:left;
			position:relative;
		}
		#leftWrap{
			width:39%;
			margin:0;
			padding: 0;
			position: relative;
			left:0;
			min-height:450px;
			overflow-y:auto;
			max-height:700px;
		}
		#rightWrap{
			width:59%;
			position:absolute;
			right:0;
			top:0;
		}
		
		
		.transEntry{
			width:100%;
		}
		.transDate, .transBlock{
			padding:4px;
			display:inline-block;
		}
		.transDate{
			border:1px #fff solid;
		}
		.transBlock{
			width:325px;
			background:#5B9BD5;
			color:#fff;
			border:1px #41719C solid;
			border-top:1px #5B9BD5 solid;
			text-align:center;
			cursor: pointer;
		}
		.transBlock:hover{
			border-color:#fff;
		}
		
		
		#stateWrap{
			margin:15px;
			min-height: 400px;
			padding:10px;
		}
		
		.selected{
			font-weight:900;
			background: #555;
			border-top:1px #555 solid;
		}
		
		.remove, .refresh{
			margin:0px 5px;
			cursor:pointer;
		}
		.fa{
			color: inherit;
			margin:0 5px;
		}
		
		#delccname{
			cursor:pointer;
			padding:6px;
		}
		
		#chaincodeDetailsWrap{
			display:none;
		}
		#jsonarea{
			width: 1050px;
			max-width:1050px;
			padding:5px;
			height:100px;
		}
		button{float:right;}
		
		
		#mainPanel{
			padding: 15px;
		}
		
		#ccWrap{
			width:700px;
		}
		
		.ccSummary{
			width:85px;
			height: 85px;
			font-size: 35px;
			font-family: Courier New;
			background:#fff;
			border: 1px #aaa solid;
			display:inline-block;
			margin-right: 10px;
			vertical-align:middle;
			text-align: center;
			line-height:85px;
		}
		.sel, .ccSummary:hover{
			cursor:pointer;
			border:1px #41719C solid;
		}
		
		.legend{
			display:inline-block;
			font-size:20px;
			width:100px;
			text-align:left;
		}
		.func{
			margin-left:50px;
		}
		
	script(type='text/javascript').
		var ledger = [];
		var sel = 0;
		$(document).ready(function(){
			var loading = '<div class="loadingdiv"><span></span> <span></span> <span></span> <span></span> <span></span><div></div></div>';
			var lsKey = 'cc_investigator';
			
			// ===============================================================================================================
			// 												On Start Up
			// ================================================================================================================
			on_start();
			function on_start(){

				buildGoFunc(bag.cc.details);															//populate custom go functions panel
				if(bag && bag.cc && bag.cc.details) build_peer_options(bag.cc.details.peers);			//populate drop down peer select box
				//$("#jsonarea").html(JSON.stringify(bag.cc, null, 4));

				//localStorage.clear();
				//var obj = load_ls();
				//if(obj && obj.cc && obj.cc.names){
				//	build_cc(bag.cc);
				//}
				rest_get_cc_names();
			}
			
			function load_ls(){
				if(window.localStorage) {
					var str = window.localStorage.getItem(lsKey);
					var obj = {};
					if(str){
						obj = JSON.parse(str);
						//console.log('local storage', obj);
						return obj;
					}
				}
			}
			
			function store_cc_name(name){
				var str = window.localStorage.getItem(lsKey);
				var obj = {};
				if(!str){
					obj.cc = {names: []};
				}
				else{
					obj = JSON.parse(str);
				}
				
				if(name && !in_array(name, obj.cc.names)) obj.cc.names.push(name);			//only add if it doesn't exist yet
				window.localStorage.setItem(lsKey, JSON.stringify(obj));					//save new one
				//build_cc(obj.cc);
			}
			
			// ===============================================================================================================
			// 												jQuery Events
			// ================================================================================================================
			$(document).on("click", ".go", function(){
				var host = bag.cc.details.peers[sel].api_host;
				var port = bag.cc.details.peers[sel].api_port;
				var func = $(this).attr('func').toLowerCase();
				var args = $(this).prev().val();
				
				var data = {
								"chaincodeSpec": {
									"type": "GOLANG",
									"chaincodeID": {
										name: bag.cc.details.deployed_name,
									},
									"ctorMsg": {
										"function": func,
										"args": JSON.parse("[" + args + "]")
									}
								}
							};
				try{
					console.log("invoking func", func);
					
					$.ajax({
						method: 'POST',
						url: 'http://' + host + ':' + port + '/devops/invoke',
						data: JSON.stringify(data),
						contentType: 'application/json',
						success: function(json){
							console.log('Success', json);
						},
						error: function(e){
							console.log('Error', e);
						}
					});
				}
				catch(e){
					console.log('ERROR you done messed up - body was not vaild json');
				}
			});
			
			$(document).on("click", ".transBlock", function(){
				var html = "";
				html += $(this).prev().html();
				html += " " + $(this).html();
				$("#selectedLegend").html(html);
				
				$("#stateInnerWrap").html('<center>' + loading + '</center>');
				
				rest_readNames(cb_got_names);
				
				function cb_got_names(e, names){
					buildVarObjcts(names);
				}
			});
			
			$(document).on("click", ".refresh", function(){
				var name = $(this).parent().attr("varName");
				var me = this;
				rest_read(name, null, cb_got_value);
				$(this).parent().append(loading);
				
				function cb_got_value(e, value){
					console.log('got', e, value);
					$(me).parent().find(".loadingdiv").fadeOut();
					if(e != null){
						$(me).prev("input").val('Error :(' );
					}
					else{
						$(me).prev("input").val(value.OK);
					}
				}
			});
			
			$("#read").click(function(){
				rest_read($("input[name='read_name']").val());
			});
			
			$("#readall").click(function(){
				rest_read_all_peers($("input[name='read_name']").val());
			});
			
			$("#write").click(function(){
				rest_write($("input[name='write_name']").val(), $("input[name='write_val']").val());
			});
			
			$("#deploy").click(function(){
				rest_deploy(cb_wait);
				
				function cb_wait(e, json){
					console.log('go - deploy timer finished', json);
				}
			});
			
			$("#peers").change(function(){
				sel = $(this).val();
				console.log('Selected: ', bag.cc.details.peers[sel].api_host, bag.cc.details.peers[sel].api_port);
			});
			
			$("#delccname").click(function(){
				var obj = load_ls();
				var name = bag.cc.details.deployed_name;
				if(name && name.length > 1){
					for(var i in obj.cc.names){
						if(obj.cc.names[i] == name){
							console.log('removing', name);
							obj.cc.names.splice(i, 1);
							window.localStorage.setItem(lsKey, JSON.stringify(obj));
							
							//build_cc(obj.cc);
							break;
						}
					}
				}
			});
			
			$("#loadjson").click(function(){
				try{
					bag.cc = JSON.parse($("#jsonarea").val());
				}
				catch(e){
					console.log('Error, invalid json');
				}
				on_start();
				$("#chaincodeDetailsWrap").fadeOut();
			});
			
			$("#changecclink").click(function(){
				console.log('hi');
				if($("#chaincodeDetailsWrap").is(":visible")){
					$("#chaincodeDetailsWrap").fadeOut();
				}
				else{
					$("#chaincodeDetailsWrap").fadeIn();
				}
			});
			
			$("#barebones").click(function(){
				rest_barebones();
			});
			
			$("#remove").click(function(){
				rest_remove();
			});
			
			$("#init").click(function(){
				rest_init();
			});
			
			$(document).on("click", ".ccSummary", function(){
				var hash = $(this).attr("hash");
				console.log('Selected: ', hash);
				rest_get_cc(hash);
			});
			
			// ===============================================================================================================
			// 												HTTP Functions
			// ================================================================================================================
			function rest_read(name, lvl, cb){
				console.log("reading var", name);
				var host = bag.cc.details.peers[sel].api_host;
				var port = bag.cc.details.peers[sel].api_port;
				var data = {
								"chaincodeSpec": {
									"type": "GOLANG",
									"chaincodeID": {
										name: bag.cc.details.deployed_name,
									},
									"ctorMsg": {
										"function": "query",
										"args": [name]
									}
								}
							};
				//console.log(data);
				
				$.ajax({
					method: 'POST',
					url: 'http://' + host + ':' + port + '/devops/query',
					data: JSON.stringify(data),
					contentType: 'application/json',
					success: function(json){
						console.log('Success - read', JSON.stringify(json));
						if(cb) cb(null, json);
					},
					error: function(e){
						console.log('Error - read', e);
						if(cb) cb(e, null);
					}
				});
			}
			
			function rest_write(name, value, cb){
				console.log("writing var", name);
				var host = bag.cc.details.peers[sel].api_host;
				var port = bag.cc.details.peers[sel].api_port;
				var data = {
								"chaincodeSpec": {
									"type": "GOLANG",
									"chaincodeID": {
										name: bag.cc.details.deployed_name,
									},
									"ctorMsg": {
										"function": "write",
										"args": [name, value]
									}
								}
							};
				$.ajax({
					method: 'POST',
					url: 'http://' + host + ':' + port + '/devops/invoke',
					data: JSON.stringify(data),
					contentType: 'application/json',
					success: function(json){
						console.log('Success - write', json);
						if(cb) cb(null, json);
					},
					error: function(e){
						console.log('Error - write', e);
						if(cb) cb(e, null);
					}
				});
			}
			
			function rest_readNames(cb){
				console.log("reading all var names");
				var host = bag.cc.details.peers[sel].api_host;
				var port = bag.cc.details.peers[sel].api_port;
				var data = {
								"chaincodeSpec": {
									"type": "GOLANG",
									"chaincodeID": {
										name: bag.cc.details.deployed_name,
									},
									"ctorMsg": {
										"function": "readnames",
										"args": []
									}
								}
							};
				setTimeout(function(){ cb(null, ["hardcoded", "test", "a", "b"]); }, 1000);
				/*$.ajax({
					method: 'POST',
					url: 'http://' + host + ':' + port + '/devops/query',
					data: JSON.stringify(data),
					contentType: 'application/json',
					success: function(json){
						console.log('Success - readNames', json);
						if(cb) cb(null, json);
					},
					error: function(e){
						console.log('Error - readNames', e);
						if(cb) cb(e, null);
					}
				});*/
			}
			
			function rest_deploy(cb){
				console.log("deploying chaincode");
				var host = bag.cc.details.peers[sel].api_host;
				var port = bag.cc.details.peers[sel].api_port;
				var data = 	{
								type: "GOLANG",
								chaincodeID: {
									path: $("input[name='deployed_name']").val()
								},
								ctorMsg: {
									function: "init",
									//"args": JSON.parse("[" + $("input[name='init_args']").val() + "]")
									args: ["72"]
								}
							};
				console.log(data);
				
				$.ajax({
					method: 'POST',
					url: 'http://' + host + ':' + port + '/devops/deploy',
					data: JSON.stringify(data),
					contentType: 'application/json',
					success: function(json){
						console.log('Success - deploy (you should still wait for go)', json);

						if(cb) setTimeout(function(){ cb(null, json); }, 60000);
					},
					error: function(e){
						console.log('Error - deploy', e);

						if(cb) cb(e, null);
					}
				});
			}
			
			function rest_read_all_peers(name, lvl, cb){
				console.log("reading var", name);
				var host = bag.cc.details.peers[sel].api_host;
				var port = bag.cc.details.peers[sel].api_port;
				var data = {
								"chaincodeSpec": {
									"type": "GOLANG",
									"chaincodeID": {
										name: bag.cc.details.deployed_name,
									},
									"ctorMsg": {
										"function": "query",
										"args": [name]
									}
								}
							};
				//console.log(data);
				
				for(var i in bag.cc.details.peers){
					$.ajax({
						method: 'POST',
						url: 'http://' + bag.cc.details.peers[i].api_host + ':' + bag.cc.details.peers[i].api_port + '/devops/query',
						data: JSON.stringify(data),
						peer_name: bag.cc.details.peers[i].name,
						contentType: 'application/json',
						success: function(json){
							console.log('Success - read all', this.peer_name, JSON.stringify(json));
							if(cb) cb(null, json);
						},
						error: function(e){
							console.log('Error - read all', this.peer_name, e);
							if(cb) cb(e, null);
						}
					});
				}
			}
			
			function rest_remove(){
				console.log("removing");
				var host = bag.cc.details.peers[sel].api_host;
				var port = bag.cc.details.peers[sel].api_port;				
				var data = {
								"chaincodeSpec": {
									"type": "GOLANG",
									"chaincodeID": {
										name: bag.cc.details.deployed_name,
									},
									"ctorMsg": {
										"function": 'delete',
										"args": [$("input[name='remove_name']").val()]
									}
								}
							};

				$.ajax({
					method: 'POST',
					url: 'http://' + host + ':' + port + '/devops/invoke',
					data: JSON.stringify(data),
					contentType: 'application/json',
					success: function(json){
						console.log('Success - remove', json);
					},
					error: function(e){
						console.log('Error - remove', e);
					}
				});
			}
			
			function rest_init(){
				console.log("init");
				var host = bag.cc.details.peers[sel].api_host;
				var port = bag.cc.details.peers[sel].api_port;
				var data = {
								"chaincodeSpec": {
									"type": "GOLANG",
									"chaincodeID": {
										name: bag.cc.details.deployed_name,
									},
									"ctorMsg": {
										"function": "init",
										"args": [name]
									}
								}
							};
				
				$.ajax({
					method: 'POST',
					url: 'http://' + host + ':' + port + '/devops/invoke',
					data: JSON.stringify(data),
					contentType: 'application/json',
					success: function(json){
						console.log('Success - init', json);
					},
					error: function(e){
						console.log('Error - init', e);
					}
				});
			}
			
			function rest_barebones(){
				var host = bag.cc.details.peers[sel].api_host;
				var port = bag.cc.details.peers[sel].api_port;				
				var data = {
								"chaincodeSpec": {
									"type": "GOLANG",
									"chaincodeID": {
										name: bag.cc.details.deployed_name,
									},
									"ctorMsg": {
										"function": $("input[name='func_name']").val(),
										"args": JSON.parse($("input[name='func_val']").val())
									}
								}
							};

				$.ajax({
					method: 'POST',
					url: 'http://' + host + ':' + port + '/devops/invoke',
					data: JSON.stringify(data),
					contentType: 'application/json',
					success: function(json){
						console.log('Success', json);
					},
					error: function(e){
						console.log('Error', e);
					}
				});
			}
			
			function rest_get_cc_names(){
				//console.log("getting cc summary files");
				var host = 'localhost';
				var port = '3000';
				$.ajax({
					method: 'GET',
					url: 'http://' + host + ':' + port + '/cc/summary',
					contentType: 'application/json',
					success: function(json){
						console.log('Success - get cc summaries');
						build_cc(json);
					},
					error: function(e){
						console.log('Error - get cc summaries', e);
					}
				});
			}
			
			function rest_get_cc(hash){
				//console.log("getting a cc summary file");
				var host = 'localhost';
				var port = '3000';
				$.ajax({
					method: 'GET',
					url: 'http://' + host + ':' + port + '/cc/summary/' + hash,
					contentType: 'application/json',
					success: function(json){
						console.log('Success - get a cc summary');
						bag.cc = json;
						on_start();
					},
					error: function(e){
						console.log('Error - get cc summary', e);
					}
				});
			}
			
			
			// ===============================================================================================================
			// 												Build UI Fun
			// ================================================================================================================
			function buildGoFunc(cc){
				var skip = ['write', 'read', 'delete', 'init'];
				var html = '';
				var field = '<input class="arginput" type="text" placeholder="array of strings"/>';
				if(cc && cc.func){
					for(var i in cc.func){
						if(!in_array(cc.func[i].toLowerCase(), skip)){
							html += '<div class="func">' + cc.func[i] + '([ ' + field + ']); </div>'
							html += '<button type="button" class="go" func="' + cc.func[i] + '"> Run <span class="fa fa-fire"></span> </button>&nbsp;&nbsp;';
						}
					}
					$("#customgowrap").html(html);
				}
			}
			
			function buildVarObjcts(names){
				var html = "";
				for(var i in names){
					html += '<div varname="' + names[i] + '">' +
								'<span> ' + names[i] + ' = </span>' +
								'<input type="text" placeholder="???" name="var_' + names[i] + '"/>' +
								'<span class="fa fa-refresh refresh"></span>' +
								//'<span class="fa fa-remove remove"></span>' +
							'</div>';
				}
				$("#stateInnerWrap").html("").append(html);
			}
			
			function buildLedger(data){
				var html = "";
				var current = 	'<div class="transEntry">';
				current += 			'<div class="transDate" id="currentDate">' + formatDate(Date.now(), '%I:%m:%s %p') + '</div>';
				current += 			'<div class="transBlock selected">Current</div>';
				current += 		'</div>';
				for(var i in data){
					html += '<div class="transEntry">';
					html += 	'<div class="transDate">' + formatDate(data[i].timestamp, '%I:%m:%s %p') + '</div>';
					html += 	'<div class="transBlock">' + data[i].name + '</div>';
					html += '</div>';
				}
				html += current;
				$("#leftWrap").html(html);
			}
			
			function build_cc(names){														//chaincode select options
				var html = '';
				for(var i in names){
					var css_sel = '';
					if(bag.cc.details && names[i].indexOf(bag.cc.details.deployed_name) >= 0) css_sel = 'sel'
					html += '<div class="ccSummary ' + css_sel + '" hash="' + names[i] +'">' + names[i].substring(0, 3) + '</div>';
				}
				html += '<span class="fa fa-plus" id="customcc"></span>';
				$("#chaincodes").html(html);
			}
			
			function build_peer_options(peers){														//peer select options
				if(peers){
					peers.sort(function(a, b) {															//alpha sort me
						var textA = a.id.toUpperCase();
						var textB = b.id.toUpperCase();
						return (textA < textB) ? -1 : (textA > textB) ? 1 : 0;
					});
					var html = '';
					for(var i in peers){
						html += '<option value="' + i +'">' + peers[i].name + '</option>';
					}
					$("#peers").html(html);
				}
			}
		});

block content
	h1 ChainCode Investigator
	p Examine/test your chaincode
	
	#chaincodeWrap
		span.legend Load:
		span#chaincodes
			.ccSummary ...
		
	#loadWrap
		span.legend Peer:
		select(style="margin-left:0;")#peers
	
	br
	br
	
	#funWrap
		
		form#ccWrap
			h2 CRUD:
			hr
			.func 
				span Read (
				input(type="text" name="read_name" placeholder="var name")
				span ); 
				button(type="button")#read 
					span Run
					span.fa.fa-fire
				button(type="button" style="margin-right:10px;")#readall
					span Run All
					span.fa.fa-th
			
			.func 
				span Write (
				input(type="text" name="write_name" placeholder="var name")
				input(type="text" name="write_val" placeholder="value")
				span ); 
				button(type="button")#write
					span Run
					span.fa.fa-fire
				
			.func 
				span Remove (
				input(type="text" name="remove_name" placeholder="var name")
				span ); 
				button(type="button")#remove
					span Run
					span.fa.fa-fire
			
			.func 
				span Init (
				input(type="text" name="init_args" placeholder="array of strings")
				span ); 
				button(type="button")#init
					span Run
					span.fa.fa-fire
			br
			
			h2 Custom Chaincode:
			hr
			#customgowrap
			
			br
			h2 Bare Bones:
			hr
			.func 
				input(type="text" name="func_name" placeholder="func name")
				span (
				input(type="text" name="func_val" placeholder="argument")
				span ); 
				button(type="button")#barebones
					span Run
					span.fa.fa-fire
	br
	br
	br
	br
	br
	br
	br
	br
	br
	
	p OLD STUFF
	//p
		a#changecclink
			span.fa.fa-plus(style="font-size:12px;")
			span Edit Chaincode Summary
		#chaincodeDetailsWrap
			textarea#jsonarea stuff
			button(type="button")#loadjson Load
		hr
		
		
		#mainWrap
			//select(style="margin-left:0;")#peers
			input(type="text" name="host" placeholder="Peer IP" style="margin-left:0; width:100px;")
			input(type="text" name="port" placeholder= "Peer Port" style="width:50px;")
			input(type="text" name="deployed_name" placeholder= "ChainCode Git URL" style="width:610px;")
			button(type="button" style="float:none")#deploy
				span Deploy
				span.fa.fa-chevron-right
			hr
			select(style="margin-left:0;")#chaincodes
			input(type="text" name="cc_name" placeholder= "ChainCode Name" style="width:900px; margin-left:0;")
			span.fa.fa-remove#delccname
			
			#innerWrap.borderMe(style="display:none;")
				#leftWrap
					center.
						<div class="loadingdiv">
							<span></span>
							<span></span>
							<span></span>
							<span></span>
							<span></span>
							<div></div>
						</div>
						
				#rightWrap
					#stateWrap.borderMe
						center
							h2#selectedLegend Select a Time
						#stateInnerWrap
